/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "buyProduct(uint256)": FunctionFragment;
    "getProductsLength()": FunctionFragment;
    "readProduct(uint256)": FunctionFragment;
    "writeProduct(string,string,string,string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyProduct"
      | "getProductsLength"
      | "readProduct"
      | "writeProduct"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "writeProduct",
    values: [string, string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeProduct",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyProduct(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProductsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    readProduct(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, BigNumber, BigNumber]>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _location: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyProduct(
    _index: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProductsLength(overrides?: CallOverrides): Promise<BigNumber>;

  readProduct(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, BigNumber, BigNumber]>;

  writeProduct(
    _name: string,
    _image: string,
    _description: string,
    _location: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyProduct(_index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getProductsLength(overrides?: CallOverrides): Promise<BigNumber>;

    readProduct(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, BigNumber, BigNumber]>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _location: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buyProduct(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProductsLength(overrides?: CallOverrides): Promise<BigNumber>;

    readProduct(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _location: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyProduct(
      _index: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProductsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    readProduct(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeProduct(
      _name: string,
      _image: string,
      _description: string,
      _location: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
